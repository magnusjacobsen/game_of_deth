use std::collections::HashMap;
use rand::prelude::*;

pub type Level = HashMap<(i64, i64), usize>;

pub fn get_level_1() -> Level {
    let cells = vec![(4,0), (4,1), (4,2), (4,6), (4,7), (4,8), (0,4), (1,4), (2,4), (6,4), (7,4), (8,4), (4,5)];
    create_level_from_vec(cells)
}

pub fn get_level_2() -> Level {
    let cells = vec![(-647,-360),(-648,-360),(-637,-360),(-646,-360),(-636,-360),(-642,-366),(-639,-360),(-645,-360),(-642,-356),(-642,-363),(-642,-365),(-642,-355),(-638,-360),(-642,-364),(-642,-357),(-642,-354),(-647,-360),(-648,-360),(-637,-360),(-646,-360),(-636,-360),(-642,-366),(-639,-360),(-645,-360),(-642,-356),(-642,-363),(-642,-365),(-642,-355),(-638,-360),(-642,-364),(-642,-357),(-642,-354),(-647,-360),(-648,-360),(-637,-360),(-646,-360),(-636,-360),(-642,-366),(-639,-360),(-645,-360),(-642,-356),(-642,-363),(-642,-365),(-642,-355),(-638,-360),(-642,-364),(-642,-357),(-642,-354),(-647,-360),(-648,-360),(-637,-360),(-646,-360),(-636,-360),(-642,-366),(-639,-360),(-645,-360),(-642,-356),(-642,-363),(-642,-365),(-642,-355),(-638,-360),(-642,-364),(-642,-357),(-642,-354),(-647,-360),(-648,-360),(-637,-360),(-646,-360),(-636,-360),(-642,-366),(-639,-360),(-645,-360),(-642,-356),(-642,-363),(-642,-365),(-642,-355),(-638,-360),(-642,-364),(-642,-357),(-642,-354)];
    create_level_from_vec(cells)
}

pub fn get_level_random(max_x: i64, max_y: i64) -> Level {
    let mut rng = rand::thread_rng();
    let num = rng.gen_range(2500, 5000);
    let cells = (0..num).map(|_| (rng.gen_range(0, max_x), rng.gen_range(0, max_y))).collect();
    create_level_from_vec(cells)
}

fn create_level_from_vec(cells: Vec<(i64,i64)>) -> Level {
    let mut level = HashMap::new();
    for c in cells {
        level.insert(c, 1);
    }
    level
}