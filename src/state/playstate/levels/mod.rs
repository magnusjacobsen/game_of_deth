use std::collections::HashMap;
use rand::prelude::*;

pub type Level = HashMap<(i64, i64), usize>;

pub fn get_level_1() -> Level {
    let cells = vec![(4,-4),(4,-1),(7,2),(8,1),(10,2),(3,7),(3,-2),(-1,3),(5,-2),(3,-3),(-1,1),(1,2),(0,1),(9,1),(0,3),(5,7),(5,6),(3,6),(4,5),(-2,2),(9,3),(5,-3),(8,3),(4,8)];
    create_level_from_vec(cells)
}

pub fn get_level_2() -> Level {
    let cells = vec![(1,2),(-1,-1),(-2,-2),(-2,-1),(1,-4),(2,0),(5,-1),(2,3),(3,-4),(6,-1),(2,-3),(3,1),(-2,0),(6,0),(1,1),(3,2),(6,-2),(2,-4)];
    create_level_from_vec(cells)
}

pub fn get_level_3() -> Level {
    let cells = vec![(-2,0),(8,9),(-5,3),(-2,2),(6,4),(-6,5),(3,1),(4,0),(-1,14),(7,9),(4,2),(7,11),(7,3),(-4,10),(-6,9),(-1,13),(-1,1),(-5,9),(-1,0),(8,5),(-2,12),(-3,2),(-3,12),(-6,10),(4,14),(6,10),(-4,3),(-2,14),(5,12),(3,14),(8,10),(5,13),(6,11),(-6,4),(5,1),(7,5),(5,2),(-4,11),(-3,13),(6,3),(-4,4),(8,4),(4,12),(3,13),(-5,11),(3,0),(-5,5),(-3,1)];
    create_level_from_vec(cells)
}

pub fn get_level_4() -> Level {
    let cells = vec![(-2,8),(7,4),(-2,9),(-1,10),(-4,4),(4,8),(8,4),(0,5),(-5,4),(2,5),(0,9),(4,2),(-2,14),(2,9),(4,6),(-1,12),(-1,2),(-6,10),(2,10),(6,9),(-2,5),(-4,10),(4,14),(3,4),(6,4),(-2,13),(4,13),(0,4),(-2,12),(3,8),(3,12),(4,12),(4,9),(-5,10),(8,10),(-1,4),(-6,4),(3,10),(4,0),(6,5),(-2,1),(-2,2),(-2,6),(-4,5),(0,10),(-4,9),(3,6),(2,4),(3,2),(7,10),(-2,0),(-1,6),(4,1),(-1,8),(6,10),(4,5)];
    create_level_from_vec(cells)
}

pub fn get_level_5() -> Level {
    let cells = vec![(2,4),(8,7),(2,3),(2,5),(8,6),(2,7),(8,8),(2,8),(7,3),(2,9),(5,9),(3,9),(8,3),(4,9),(8,4),(3,3),(7,9),(4,3),(6,9),(2,6),(6,3),(8,5),(5,3),(8,9)];
    create_level_from_vec(cells)
}

pub fn get_level_6() -> Level {
    let cells = vec![(150,67),(150,68),(151,79),(150,74),(150,71),(150,69),(151,78),(150,75),(150,78),(151,68),(150,79),(150,77),(150,73),(150,76),(150,72),(151,67),(150,70)];
    create_level_from_vec(cells)
}

pub fn get_level_7() -> Level {
    let cells = vec![(11,5),(3,-8),(3,12),(4,-2),(8,2),(7,10),(-6,3),(8,1),(-4,5),(1,10),(0,3),(7,9),(11,-1),(-2,-1),(-4,-1),(1,-6),(3,6),(8,3),(14,3),(5,-8),(0,1),(10,5),(7,-4),(-6,2),(5,-2),(1,8),(1,9),(12,-1),(1,-5),(-2,5),(14,1),(3,-2),(-3,-1),(0,2),(7,-6),(5,12),(7,-5),(5,6),(12,5),(4,6),(7,8),(-3,5),(10,-1),(1,-4),(-6,1),(14,2),(4,12),(4,-8)];
    create_level_from_vec(cells)
}

pub fn get_level_8() -> Level {
    let cells = vec![(7,10),(-1,13),(-2,0),(3,1),(-5,10),(-1,14),(-6,5),(-1,1),(-1,0),(3,13),(4,13),(8,5),(-6,10),(4,1),(4,14),(0,14),(1,-1),(8,10),(-2,13),(8,9),(-2,14),(7,6),(2,0),(-6,4),(7,4),(-5,5),(-4,7),(0,0),(8,4),(-5,8),(-5,6),(7,5),(3,0),(-6,9),(6,7),(7,8),(-5,4),(-5,9),(4,0),(2,14),(3,14),(-2,1),(7,9),(1,15)];
    create_level_from_vec(cells)
}

pub fn get_level_9() -> Level {
    let cells = vec![(9,2),(11,5),(-3,-1),(4,6),(-5,2),(2,9),(4,13),(-3,6),(0,9),(11,-1),(4,-2),(-3,4),(8,2),(4,-7),(4,-8),(3,2),(8,9),(15,2),(-3,5),(7,-5),(4,7),(4,5),(1,2),(11,-2),(-6,2),(4,-1),(13,2),(1,9),(4,12),(-3,0),(4,11),(6,9),(11,6),(1,-5),(0,2),(5,2),(8,-5),(6,-5),(0,-5),(14,2),(4,2),(-3,-2),(4,-3),(11,4),(4,-9),(4,1),(7,9),(-7,2),(-1,2),(11,0),(2,-5),(7,2)];
    create_level_from_vec(cells)
}

pub fn get_level_10() -> Level {
    let cells = vec![(158,71),(160,72),(162,75),(160,74),(158,75),(162,71),(161,70),(162,70),(161,76),(159,74),(158,76),(162,76),(159,76),(161,74),(159,72),(161,72),(158,70),(159,70)];
    create_level_from_vec(cells)
}

pub fn get_level_11() -> Level {
    let cells = vec![(7,15),(0,23),(0,25),(-1,16),(8,23),(1,24),(-1,17),(-1,23),(8,15),(4,19),(3,21),(9,24),(9,17),(8,17),(9,16),(1,25),(9,23),(8,25),(1,15),(7,16),(5,21),(7,25),(7,24),(0,17),(1,16),(0,15),(-1,24)];
    create_level_from_vec(cells)
}

pub fn get_level_12() -> Level {
    let cells = vec![(-6,4),(5,2),(7,11),(4,2),(-4,10),(-1,13),(-3,12),(-4,11),(3,13),(1,13),(8,9),(-6,5),(4,0),(3,0),(1,0),(1,2),(-6,10),(5,13),(7,3),(3,14),(-2,12),(-3,13),(-3,1),(-6,9),(1,12),(8,10),(8,4),(7,5),(-4,4),(-2,0),(6,3),(4,12),(-3,2),(4,14),(7,9),(-5,11),(-5,5),(5,1),(1,1),(-5,3),(-2,2),(8,5),(6,10),(1,14),(6,4),(-5,9),(5,12),(-1,14),(-1,1),(-1,0),(3,1),(-4,3),(-2,14),(6,11)];
    create_level_from_vec(cells)
}

pub fn get_level_random(max_x: i64, max_y: i64) -> Level {
    let mut rng = rand::thread_rng();
    let num = rng.gen_range(2500, 5000);
    let cells = (0..num).map(|_| (rng.gen_range(0, max_x), rng.gen_range(0, max_y))).collect();
    create_level_from_vec(cells)
}

fn create_level_from_vec(cells: Vec<(i64,i64)>) -> Level {
    let mut level = HashMap::new();
    for c in cells {
        level.insert(c, 1);
    }
    level
}